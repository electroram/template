\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+cm}{/*********************************************************}
\PYG{c+cm}{树链剖分}

\PYG{c+cm}{树链剖分是一种将树形结构转化为线性结构的算法 }
\PYG{c+cm}{通过两次树的遍历,将树剖分成一个个的[重链], }
\PYG{c+cm}{且对每个节点进行编号,确保一条链上的节点编号连续 }
\PYG{c+cm}{这样一来,我们就能通过一个维护区间关系的数据结构来维护树上,属同一个链上的元素}

\PYG{c+cm}{在维护两个节点(u,v)的时候即:维护两个节点(u,v)间的元素, }
\PYG{c+cm}{我么从深度大的不断向上维护,最后遍历的位置,两个节点一定在一条链上(且深度小的就是LCA(u,v))}
\PYG{c+cm}{**********************************************************/}
\PYG{k+kt}{int} \PYG{n}{dep}\PYG{p}{[}\PYG{n}{N}\PYG{p}{];}   \PYG{c+c1}{//每个节点的深度}
\PYG{k+kt}{int} \PYG{n}{fa}\PYG{p}{[}\PYG{n}{N}\PYG{p}{];}    \PYG{c+c1}{//每个节点的父节点}
\PYG{k+kt}{int} \PYG{n}{sz}\PYG{p}{[}\PYG{n}{N}\PYG{p}{];}    \PYG{c+c1}{//每个节点所有的子节点个数(包括自身)}
\PYG{k+kt}{int} \PYG{n}{son}\PYG{p}{[}\PYG{n}{N}\PYG{p}{];}   \PYG{c+c1}{//每个节点的重儿子}
\PYG{k+kt}{void} \PYG{n+nf}{dfs1}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{u}\PYG{p}{,}\PYG{k+kt}{int} \PYG{n}{ff}\PYG{p}{,}\PYG{k+kt}{int} \PYG{n}{deep}\PYG{p}{)\PYGZob{}}
    \PYG{n}{son}\PYG{p}{[}\PYG{n}{u}\PYG{p}{]}\PYG{o}{=}\PYG{l+m+mi}{0}\PYG{p}{;}\PYG{n}{fa}\PYG{p}{[}\PYG{n}{u}\PYG{p}{]}\PYG{o}{=}\PYG{n}{ff}\PYG{p}{;}\PYG{n}{sz}\PYG{p}{[}\PYG{n}{u}\PYG{p}{]}\PYG{o}{=}\PYG{l+m+mi}{1}\PYG{p}{;}\PYG{n}{dep}\PYG{p}{[}\PYG{n}{u}\PYG{p}{]}\PYG{o}{=}\PYG{n}{deep}\PYG{p}{;}
    \PYG{k}{for}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{n}{head}\PYG{p}{[}\PYG{n}{u}\PYG{p}{];}\PYG{n}{i}\PYG{o}{!=\PYGZhy{}}\PYG{l+m+mi}{1}\PYG{p}{;}\PYG{n}{i}\PYG{o}{=}\PYG{n}{G}\PYG{p}{[}\PYG{n}{i}\PYG{p}{].}\PYG{n}{next}\PYG{p}{)\PYGZob{}}
        \PYG{k+kt}{int} \PYG{n}{v}\PYG{o}{=}\PYG{n}{G}\PYG{p}{[}\PYG{n}{i}\PYG{p}{].}\PYG{n}{to}\PYG{p}{;}
        \PYG{k}{if}\PYG{p}{(}\PYG{n}{v}\PYG{o}{==}\PYG{n}{ff}\PYG{p}{)} \PYG{k}{continue}\PYG{p}{;}
        \PYG{n}{dfs1}\PYG{p}{(}\PYG{n}{v}\PYG{p}{,}\PYG{n}{u}\PYG{p}{,}\PYG{n}{deep}\PYG{o}{+}\PYG{l+m+mi}{1}\PYG{p}{);}
        \PYG{n}{sz}\PYG{p}{[}\PYG{n}{u}\PYG{p}{]}\PYG{o}{+=}\PYG{n}{sz}\PYG{p}{[}\PYG{n}{v}\PYG{p}{];}                  
        \PYG{k}{if}\PYG{p}{(}\PYG{n}{sz}\PYG{p}{[}\PYG{n}{v}\PYG{p}{]}\PYG{o}{\PYGZgt{}}\PYG{n}{sz}\PYG{p}{[}\PYG{n}{son}\PYG{p}{[}\PYG{n}{u}\PYG{p}{]])} \PYG{n}{son}\PYG{p}{[}\PYG{n}{u}\PYG{p}{]}\PYG{o}{=}\PYG{n}{v}\PYG{p}{;} \PYG{c+c1}{//重儿子子节点个数大}
    \PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}

\PYG{k+kt}{int} \PYG{n}{top}\PYG{p}{[}\PYG{n}{N}\PYG{p}{];}   \PYG{c+c1}{//节点所在链上的【根】}
\PYG{k+kt}{int} \PYG{n}{tree}\PYG{p}{[}\PYG{n}{N}\PYG{p}{];}  \PYG{c+c1}{//节点对应在线段树/树状数组的位置}
\PYG{k+kt}{int} \PYG{n}{pre}\PYG{p}{[}\PYG{n}{N}\PYG{p}{];}   \PYG{c+c1}{//在线段树/树状数组的位置对应的节点的标号  (树状数组时一般不需要)}
\PYG{k+kt}{int} \PYG{n}{cnt}\PYG{p}{;}      \PYG{c+c1}{//对链上节点编号}
\PYG{k+kt}{void} \PYG{n+nf}{dfs2}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{u}\PYG{p}{,}\PYG{k+kt}{int} \PYG{n}{ff}\PYG{p}{)\PYGZob{}}
    \PYG{n}{tree}\PYG{p}{[}\PYG{n}{u}\PYG{p}{]}\PYG{o}{=++}\PYG{n}{cnt}\PYG{p}{;}\PYG{n}{pre}\PYG{p}{[}\PYG{n}{tree}\PYG{p}{[}\PYG{n}{u}\PYG{p}{]]}\PYG{o}{=}\PYG{n}{u}\PYG{p}{;}\PYG{n}{top}\PYG{p}{[}\PYG{n}{u}\PYG{p}{]}\PYG{o}{=}\PYG{n}{ff}\PYG{p}{;}
    \PYG{k}{if}\PYG{p}{(}\PYG{n}{son}\PYG{p}{[}\PYG{n}{u}\PYG{p}{])} \PYG{n}{dfs2}\PYG{p}{(}\PYG{n}{son}\PYG{p}{[}\PYG{n}{u}\PYG{p}{],}\PYG{n}{ff}\PYG{p}{);} \PYG{c+c1}{//先遍历重链   }
    \PYG{k}{else} \PYG{k}{return} \PYG{p}{;}
    \PYG{k}{for}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{i}\PYG{o}{=}\PYG{n}{head}\PYG{p}{[}\PYG{n}{u}\PYG{p}{];}\PYG{n}{i}\PYG{o}{!=\PYGZhy{}}\PYG{l+m+mi}{1}\PYG{p}{;}\PYG{n}{i}\PYG{o}{=}\PYG{n}{G}\PYG{p}{[}\PYG{n}{i}\PYG{p}{].}\PYG{n}{next}\PYG{p}{)\PYGZob{}}
        \PYG{k+kt}{int} \PYG{n}{v}\PYG{o}{=}\PYG{n}{G}\PYG{p}{[}\PYG{n}{i}\PYG{p}{].}\PYG{n}{to}\PYG{p}{;}
        \PYG{k}{if}\PYG{p}{(}\PYG{n}{v}\PYG{o}{!=}\PYG{n}{fa}\PYG{p}{[}\PYG{n}{u}\PYG{p}{]}\PYG{o}{\PYGZam{}\PYGZam{}}\PYG{n}{v}\PYG{o}{!=}\PYG{n}{son}\PYG{p}{[}\PYG{n}{u}\PYG{p}{])} \PYG{n}{dfs2}\PYG{p}{(}\PYG{n}{v}\PYG{p}{,}\PYG{n}{v}\PYG{p}{);}
    \PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}

\PYG{k+kt}{int} \PYG{n+nf}{findi}\PYG{p}{(}\PYG{k+kt}{int} \PYG{n}{x}\PYG{p}{,}\PYG{k+kt}{int} \PYG{n}{y}\PYG{p}{)\PYGZob{}}
    \PYG{k+kt}{int} \PYG{n}{fx}\PYG{o}{=}\PYG{n}{top}\PYG{p}{[}\PYG{n}{x}\PYG{p}{],}\PYG{n}{fy}\PYG{o}{=}\PYG{n}{top}\PYG{p}{[}\PYG{n}{y}\PYG{p}{];}
    \PYG{k+kt}{int} \PYG{n}{ans} \PYG{o}{=} \PYG{l+m+mi}{0}\PYG{p}{;}
    \PYG{k}{while}\PYG{p}{(}\PYG{n}{fx}\PYG{o}{!=}\PYG{n}{fy}\PYG{p}{)\PYGZob{}}
        \PYG{k}{if}\PYG{p}{(}\PYG{n}{dep}\PYG{p}{[}\PYG{n}{fx}\PYG{p}{]}\PYG{o}{\PYGZlt{}}\PYG{n}{dep}\PYG{p}{[}\PYG{n}{fy}\PYG{p}{])} \PYG{n}{myswap}\PYG{p}{(}\PYG{n}{x}\PYG{p}{,}\PYG{n}{y}\PYG{p}{),}\PYG{n}{myswap}\PYG{p}{(}\PYG{n}{fx}\PYG{p}{,}\PYG{n}{fy}\PYG{p}{);}
        \PYG{n}{ans}\PYG{o}{+=}\PYG{n}{getSum}\PYG{p}{(}\PYG{n}{tree}\PYG{p}{[}\PYG{n}{x}\PYG{p}{])}\PYG{o}{\PYGZhy{}}\PYG{n}{getSum}\PYG{p}{(}\PYG{n}{tree}\PYG{p}{[}\PYG{n}{fx}\PYG{p}{]}\PYG{o}{\PYGZhy{}}\PYG{l+m+mi}{1}\PYG{p}{);}  \PYG{c+c1}{//不断向上维护区间 }
        \PYG{n}{x}\PYG{o}{=}\PYG{n}{fa}\PYG{p}{[}\PYG{n}{fx}\PYG{p}{],}\PYG{n}{fx}\PYG{o}{=}\PYG{n}{top}\PYG{p}{[}\PYG{n}{x}\PYG{p}{];}
    \PYG{p}{\PYGZcb{}}
    \PYG{k}{if}\PYG{p}{(}\PYG{n}{dep}\PYG{p}{[}\PYG{n}{x}\PYG{p}{]}\PYG{o}{\PYGZgt{}}\PYG{n}{dep}\PYG{p}{[}\PYG{n}{y}\PYG{p}{])} \PYG{n}{myswap}\PYG{p}{(}\PYG{n}{x}\PYG{p}{,}\PYG{n}{y}\PYG{p}{);}
    \PYG{k}{if}\PYG{p}{(}\PYG{n}{x}\PYG{o}{!=}\PYG{n}{y}\PYG{p}{)} \PYG{n}{ans}\PYG{o}{+=}\PYG{n}{getSum}\PYG{p}{(}\PYG{n}{tree}\PYG{p}{[}\PYG{n}{y}\PYG{p}{])}\PYG{o}{\PYGZhy{}}\PYG{n}{getSum}\PYG{p}{(}\PYG{n}{tree}\PYG{p}{[}\PYG{n}{x}\PYG{p}{]);}
    \PYG{k}{return} \PYG{n}{ans} \PYG{p}{;}
\PYG{p}{\PYGZcb{}}
\end{Verbatim}
